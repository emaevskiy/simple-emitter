"use strict";const t=(t,e)=>e===Array?Array.isArray(t):e===Object?"object"==typeof t&&null!==t:e===Function?"function"==typeof t:e===String?"string"==typeof t:e===Number?"number"==typeof t:e===Boolean?"boolean"==typeof t:null===e?null===t:void 0===e&&void 0===t;function e(e,n="any"){return"any"===n||(Array.isArray(n)?n.some((n=>t(e,n))):t(e,n))}module.exports=class{constructor(){this.events={}}$on(t,n){if(!e(t,[String,Array])||!e(n,[Function]))return this;if(this.events[t]||(this.events[t]=[]),Array.isArray(t))for(let e=0,r=t.length;e<r;e++)this.$on(t[e],n);else this.events[t].push(n);return this}$once(t,e){const n=(...r)=>{this.$off(t,n),e.apply(this,r)};return n.fn=e,this.$on(t,n),this}$off(t,e){if(!arguments.length)return this.events={},this;if(Array.isArray(t)){for(let n=0,r=t.length;n<r;n++)this.$off(t[n],e);return this}const n=this.events[t];if(!n)return this;if(!e)return this.events[t]=null,this;let r,s=n.length;for(;s--;)if(r=n[s],r===e||r.fn===e){n.splice(s,1);break}return this}$emit(t,...e){let n=this.events[t];if(n){n=n.length>1?[...n]:n;for(let t=0,r=n.length;t<r;t++)n[t].call(this,...e)}return this}};
